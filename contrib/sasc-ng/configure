#!/bin/sh

die(){
    echo $1
    exit 1
}

die_unknown(){
    echo "Unknown option \"$1\"."
    echo "See $0 --help for available options."
    exit 1
}

confirm(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

#check whether option is supported by this cpu
check_cpu(){
    ok=0
    grep "^flags.* $1 " /proc/cpuinfo >/dev/null 2>&1
    if test $? -eq 0; then
      ok=1
    else
      grep "^flags.* $1\$" /proc/cpuinfo >/dev/null 2>&1
      if test $? -eq 0; then
        ok=1
      fi
    fi
    eval test $ok -eq 1
}

#try to figure out best FFdecsa compiler options
get_cpu_optimization(){
   FLAGS="FLAGS=-O3 -fexpensive-optimizations -funroll-loops"
   arch=`uname -m`
   processors_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
   vendor=`cat /proc/cpuinfo |grep "vendor_id" | head -n 1 | sed -e "s/.*:\W*//"`
   gcc_ver=`$CXX -v 2>&1 | grep "gcc version" | head -n 1`
   gcc_major=`echo $gcc_ver | sed -e 's/^gcc version \([0-9]*\)\..*/\1/'`
   gcc_minor=`echo $gcc_ver | sed -e 's/^gcc version [0-9]*\.\([0-9]*\).*/\1/'`
   if test $gcc_major -gt 4; then
     ARCH="native"
   elif test $gcc_major -eq 4 && test $gcc_minor -ge 2; then
     ARCH="native"
   elif test "x$arch" = "xx86_64"; then
     if test "x$vendor" = "xAuthenticAMD"; then
        ARCH="k8"
     elif test "x$vendor" = "xGenuineIntel"; then
        ARCH="nocona"
     else
        echo **WARNING** - Unknown vendor $vendor - assuming nocona
        ARCH="nocona"
     fi
     FLAGS="$FLAGS -finline-limit=6000000 --param max-unrolled-insns=500"
   elif test "x$arch" = "xathlon-xp"; then
     ARCH="athlon-xp"
     FLAGS="$FLAGS -finline-limit=6000000 --param max-unrolled-insns=500"
   else
     ARCH="pentium"
   fi
   OPTS=""
   for opt in mmx sse sse2; do
     if check_cpu $opt; then
       OPTS="$OPTS $opt"
       FLAGS="$FLAGS -m$opt"
     fi
   done
   FLAGS="$FLAGS -march=$ARCH"
   echo "Processor capabilities: $ARCH ($OPTS )"
}

show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  echo "  --compiletype=<type>     specify compile type of release or debug,"
  echo "                           default is debug"
  echo "  --shared                 compile sc shared libs instaed of static"
  echo "  --dvb-dir=<path>         use <path> for DVB headers"
  echo "  --auxserver              use auxserver with localhost:7777:auxserver"
  echo "  --auxserver=<host:port:password>"
  echo "                           use auxserver with given parms"
  echo "  --optimize=<opts>        set FFDecsa optimiation detection"
  echo "                           yes: Try most common optimizations (default)"
  echo "                           long: Try all known optimizations"
  echo "                           no: Don't do any optimizations"
  echo "  --ffdecsa_mode=<val>     use <val> optimization"
  echo "                           like  --ffdecsa_mode=PARALLEL_128_SSE"
  echo "  -cxx=<c++ compiler>      command for C++ compilation (default: g++)"
  exit 0
}
MAX_MODE=PARALLEL_32_INT
ffdecsa_opt="yes"
compiletype_opt="debug"
for opt do
  optval="${opt#*=}"
  case "$opt" in
  --dvb-dir=*) dvb_path=`eval echo $optval`
  ;;
  --cxx=*) CXX="$optval"
  ;;
  --ffdecsa_mode=*) ffdecsa_opt="no"; MAX_MODE="$optval"
  ;;
  --ffdecsa_flags=*) ffdecsa_flags="$optval"
  ;;
  --optimize=*) ffdecsa_opt="$optval"
  ;;
  --auxserver) auxserver_opt="localhost:7777:auxserver"
  ;;
  --auxserver=*) auxserver_opt="$optval"
  ;;
  --compiletype=*) compiletype_opt="$optval"
  ;;
  --shared) shared_opt="1"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

# Get kernel version numbers

    SHORT_KERNEL=$( echo `uname -r` | grep -o '[[:digit:]]\+\.[[:digit:]]\+' )
    FIRST_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n1 )
    SECOND_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
    PATCHLEVEL=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )

# Get OS and release info

    OS=$( lsb_release -si )
    RELEASE=$( lsb_release -sc )

# Abort if running kernel is < 3.x

if [ $FIRST_DIGIT -lt 3 ]; then
  echo "The kernel you are running is not supported anymore.\n\nMinimum supported version is 3.x\n\nAborting..."
  exit 1
fi

# Are we running Debian?
# If so, make our lives easier!

if echo $OS | grep 'Debian' 2>&1 1>/dev/null; then

# Install dependencies

  if ! dpkg-query -l libv4l-dev > /dev/null 2>&1; then
     echo "Missing libv4l-dev, marking for installation."
     apt-get install libv4l-dev -y || die "Error installing libv4l-dev"
  fi

  if ! dpkg-query -l libproc-processtable-perl > /dev/null 2>&1; then
     echo "Missing libproc-processtable-perl, marking for installation."
     apt-get install libproc-processtable-perl -y || die "Error installing libproc-processtable-perl"
  fi

  if ! dpkg-query -l libssl-dev > /dev/null 2>&1; then
     echo "Missing libssl-dev, marking for installation."
     apt-get install libssl-dev -y || die "Error installing libssl-dev"
  fi

  if ! dpkg-query -l linux-headers-`uname -r` > /dev/null 2>&1; then
     echo "\nMissing linux-headers-`uname -r`, marking for installation.\n\n
     IMPORTANT: If you compiled a custom kernel, answer no\n"
     confirm "Would you really like me to install linux-headers-`uname -r`? [y/N]"
    # if answer = no
    if [ $(echo $?) -eq 1 ]; then
      echo "\n   Not installing linux-headers-`uname -r`\n" 
    # if answer = yes
    else
       apt-get install linux-headers-`uname -r` -y
    fi
  fi

  # When using sasc, the kernel has to be patched.
  # Let's do it.

    KERNEL_TARBALL="/usr/src/linux-source-$SHORT_KERNEL.tar.bz2"
    KERNELORG_TARBALL="/usr/src/linux-$SHORT_KERNEL.tar.bz2"
    BUILD_DIR=/lib/modules/`uname -r`/build
    TEMPDIR=/usr/src/sasctmp/$SHORT_KERNEL

  if test -e /dev/dvb/adapter4 > /dev/null 2>&1; then
    echo "\n\n   WARNING!!!\n\n   You have more then 4 DVB adapters.\n   Your kernel cannot be patched.\n\n   If you did not do so allready,\n   recompile your kernel.\n\n   Answer 'no' to next questions,\n   or just hit 'enter' twice.\n"
    sleep 10
  fi

  echo "\nSasc needs a patched dvb-core.ko kernel module.\n\nIf you are running a default Debian kernel, or if you compiled a kernel from www.kernel.org, I can do that for you.\nIn order to do this right, you need a line like:\n\n deb-src http://ftp.debian.org/debian/ wheezy main contrib non-free\n\nin your /etc/apt/sources.list and do apt-get update afterwards.\n\n(or if you are running a kernel from eg 'sid' replace \n'wheezy' with 'sid' in that line)\n\nOr if you compiled a kernel from www.kernel.org, just answer no.\nWe'll address this situation in a next question.\n\n"
  confirm "Is your sources.list OK and do you want me to install linux-source-$SHORT_KERNEL? This will remove any previously installed linux-source packages and (re)install the source for your current kernel. Having done that, your running kernel will be patched for use with sasc.[y/N]"

  if [ $(echo $?) -eq 0 ]; then
    apt-get purge linux-source* -y && apt-get install linux-source-$SHORT_KERNEL -y
    echo "\nBuilding patched dvb-core module for kernel `uname -r`\n\nPreparing, this may take a while...\n"
    rm -rf $TEMPDIR
    mkdir -p $TEMPDIR
    if  [ $FIRST_DIGIT -eq 3 ]; then
      if [ $SECOND_DIGIT -lt 7 ]; then
        tar -xjf $KERNEL_TARBALL -C $TEMPDIR --strip-components 5 linux-source-$SHORT_KERNEL/drivers/media/dvb/dvb-core/
        echo "\nBuilding and installing, please be patient...\n"
        patch -p5 -d $TEMPDIR < linux-2.6.38-dvb-mutex.patch > /dev/null 2>&1
        make -C $BUILD_DIR M=$TEMPDIR modules
        rm -f /lib/modules/`uname -r`/updates/dvb-core.ko > /dev/null 2>&1
        mkdir -p /lib/modules/`uname -r`/updates > /dev/null 2>&1
        /usr/bin/install $TEMPDIR/dvb-core.ko /lib/modules/`uname -r`/updates/
        cp -f $TEMPDIR/dvbdev.h dvbloopback/module/dvbdev-orig.h
        rm -rf $TEMPDIR
        depmod -a
      else 
        tar -xjf $KERNEL_TARBALL -C $TEMPDIR --strip-components 4 linux-source-$SHORT_KERNEL/drivers/media/dvb-core/
        echo "\nBuilding and installing, please be patient...\n"
        patch -p4 -d $TEMPDIR < linux-3.7.1-dvb-mutex.patch > /dev/null 2>&1
        make -C $BUILD_DIR M=$TEMPDIR modules
        rm -f /lib/modules/`uname -r`/updates/dvb-core.ko > /dev/null 2>&1
        mkdir -p /lib/modules/`uname -r`/updates > /dev/null 2>&1
        /usr/bin/install $TEMPDIR/dvb-core.ko /lib/modules/`uname -r`/updates/
        cp -f $TEMPDIR/dvbdev.h dvbloopback/module/dvbdev-orig.h
        rm -rf $TEMPDIR
        depmod -a
      fi
    fi
  else
    echo "\n   Not installing linux-source-$SHORT_KERNEL\n"  
    confirm "Do you want me to patch a kernel that you compiled from official www.kernel.org sources?[y/N]"
    if [ $(echo $?) -eq 0 ]; then
      if [ $FIRST_DIGIT -eq 3 ]; then
        wget -P /usr/src https://www.kernel.org/pub/linux/kernel/v3.x/linux-$SHORT_KERNEL.tar.bz2
      fi
      echo "\nBuilding patched dvb-core module for kernel `uname -r`\n\nPreparing, this may take a while...\n"
      rm -rf $TEMPDIR
      mkdir -p $TEMPDIR
      if [ $SECOND_DIGIT -lt 7 ]; then
        tar -xjf $KERNELORG_TARBALL -C $TEMPDIR --strip-components 5 linux-$SHORT_KERNEL/drivers/media/dvb/dvb-core/
        echo "\nBuilding and installing, please be patient...\n"
        patch -p5 -d $TEMPDIR < linux-2.6.38-dvb-mutex.patch > /dev/null 2>&1
        make -C $BUILD_DIR M=$TEMPDIR modules
        rm -f /lib/modules/`uname -r`/updates/dvb-core.ko > /dev/null 2>&1
        mkdir -p /lib/modules/`uname -r`/updates > /dev/null 2>&1
        /usr/bin/install $TEMPDIR/dvb-core.ko /lib/modules/`uname -r`/updates/
        cp -f $TEMPDIR/dvbdev.h dvbloopback/module/dvbdev-orig.h
        rm -rf $TEMPDIR
        rm -f $KERNELORG_TARBALL
        depmod -a
      else 
        tar -xjf $KERNELORG_TARBALL -C $TEMPDIR --strip-components 4 linux-$SHORT_KERNEL/drivers/media/dvb-core/
        echo "\nBuilding and installing, please be patient...\n"
        patch -p4 -d $TEMPDIR < linux-3.7.1-dvb-mutex.patch > /dev/null 2>&1
        make -C $BUILD_DIR M=$TEMPDIR modules
        rm -f /lib/modules/`uname -r`/updates/dvb-core.ko > /dev/null 2>&1
        mkdir -p /lib/modules/`uname -r`/updates > /dev/null 2>&1
        /usr/bin/install $TEMPDIR/dvb-core.ko /lib/modules/`uname -r`/updates/
        cp -f $TEMPDIR/dvbdev.h dvbloopback/module/dvbdev-orig.h
        rm -rf $TEMPDIR
        rm -f $KERNELORG_TARBALL
        depmod -a
      fi
    else
      echo "\n   Not patching any kernel\n"
    fi
  fi
fi

if test "x$CXX" = "x"; then
  CXX=g++
fi
echo "Using C++ compiler: $CXX"

if test "x$ffdecsa_opt" = "xlong"; then
  FFDECSA_MODES="PARALLEL_32_INT PARALLEL_32_4CHAR PARALLEL_32_4CHARA \
                 PARALLEL_64_8CHAR PARALLEL_64_8CHARA PARALLEL_64_2INT \
                 PARALLEL_64_LONG PARALLEL_64_MMX PARALLEL_128_16CHAR \
                 PARALLEL_128_16CHARA PARALLEL_128_4INT PARALLEL_128_2LONG \
                 PARALLEL_128_2MMX PARALLEL_128_SSE PARALLEL_128_SSE2"
elif test "x$ffdecsa_opt" = "xyes"; then
  FFDECSA_MODES="PARALLEL_32_INT PARALLEL_64_2INT PARALLEL_64_LONG \
                 PARALLEL_64_MMX PARALLEL_128_2LONG PARALLEL_128_2MMX \
                 PARALLEL_128_SSE PARALLEL_128_SSE2"
elif test "x$ffdecsa_opt" != "xno"; then
  echo "Bad option to --optimize '$ffdecsa_opt'.  Should be 'yes, no, long'"
  exit 1
fi
if test "x${TMPDIR}" = "x"; then
  TMPDIR="/tmp"
fi

echo "# Automatically generated by configure - do not modify" > config.mak

if test "x$compiletype_opt" = "xrelease"; then
  echo "Using compile type release"
  echo "RELEASE=1" >> config.mak
elif test "x$compiletype_opt" = "xdebug"; then
  echo "Using compile type debug"
else
  echo "Bad option to --compiletype '$compiletype_opt'. Should be 'release, debug'"
  exit 1
fi

if test "x$auxserver_opt" != "x"; then
  echo $auxserver_opt | {
    IFS=: read host port pass
    echo "AUXSERVER_OPTS=-DAUXSERVER_HOST=\\\"$host\\\" -DAUXSERVER_PORT=\\\"$port\\\" -DAUXSERVER_PASSWD=\\\"$pass\\\" -DUSE_AUXSERVER" >> config.mak
  }
fi

if test "x$shared_opt" = "x1"; then
  echo "Compiling sc for shared libraries"
  echo "USE_DLOAD=1" >> config.mak
fi

TMPDIR="${TMPDIR}/sasc-ng.${RANDOM}"
mkdir ${TMPDIR}

#Test FFDECSA compile
MAX_val=0
if test "x$ffdecsa_opt" != "xno"; then
   if test "x$ffdecsa_flags" = "x"; then
     if test -f /proc/cpuinfo; then
       get_cpu_optimization
     fi
   else
     FLAGS=$ffdecsa_flags
   fi
   FFdecsaDIR="../../FFdecsa"
   TMPOUT="${TMPDIR}/FFdecsa/out"
   mkdir "${TMPDIR}/FFdecsa"
   cp $FFdecsaDIR/*.c $FFdecsaDIR/*.h $FFdecsaDIR/Makefile "${TMPDIR}/FFdecsa/"
   echo "Trying various FFdecsa optimizations..."
   for var in ${FFDECSA_MODES}; do
     make -C "${TMPDIR}/FFdecsa" FFdecsa_test "PARALLEL_MODE=${var}" "${FLAGS}" "COMPILER=$CXX" >/dev/null 2>&1
     if test $? -ne 0 ; then
       echo "    ${var}: build failed"
     else
       rm -f ${TMPOUT}
       sync;sleep 2; "${TMPDIR}/FFdecsa/FFdecsa_test" > /dev/null 2>"${TMPOUT}"
       if test $? -ne 0; then
         echo "    ${var}: test failed"
       else
         grep FAILED "${TMPOUT}" >/dev/null 2>&1
         if test $? -ne 1; then
           echo "    ${var}: test failed"
         else
           res=`grep "speed=.*Mbit" "${TMPOUT}" | sed -e 's/^.*=\([0-9]*\)\.[0-9]* Mbit.*$/\1/'`
           echo "    ${var}: $res"
           if test $res -gt $MAX_val; then
             MAX_val=$res
             MAX_MODE=$var
           fi
         fi
       fi
     fi
     make -C "${TMPDIR}/FFdecsa" clean >/dev/null 2>&1
   done
   echo "Choosing PARALLEL_MODE = ${MAX_MODE}"
   echo "FFDECSA_OPTS = \"$FLAGS\" PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
else
   if ! test -f /proc/cpuinfo; then
     echo "\nYou should not set '--ffdecsa_mode='\n\nAborting...\n"
     rm -rf "${TMPDIR}"
     exit 1
   fi
   get_cpu_optimization
   if test "x$MAX_MODE" != "xPARALLEL_32_INT"; then
     echo "Using PARALLEL_MODE = ${MAX_MODE}"
     echo "FFDECSA_OPTS = \"$FLAGS\" PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
   else
     echo "Using PARALLEL_MODE = ${MAX_MODE}"
     echo "FFDECSA_OPTS = PARALLEL_MODE=${MAX_MODE} COMPILER=$CXX" >> config.mak
   fi
fi

if test "x$dvb_path" != "x"; then
  cp -f dvbloopback/module/config_dvb_dvbdir.pl dvbloopback/module/config_dvb.pl
  if test -e "${dvb_path}/include/linux/dvb/frontend.h"; then
    echo "DVB_DIR=${dvb_path}" >> config.mak
    echo "Using DVB_DIR: ${dvb_path}"
  elif test -e "${dvb_path}/linux/include/linux/dvb/frontend.h"; then
    echo "DVB_DIR=${dvb_path}/linux" >> config.mak
    echo "Using DVB_DIR: ${dvb_path}/linux"
  elif test -e "${dvb_path}/include/uapi/linux/dvb/frontend.h"; then
    echo "DVB_DIR=${dvb_path}" >> config.mak
    echo "Using DVB_DIR: ${dvb_path}"
  else
    echo "Could not find DVB headers within $dvb_path"
  fi
fi

if test "x$dvb_path" = "x"; then
# Distinguish between '3.6 or lower' and '3.7 or higher' kernels
  if [ $FIRST_DIGIT -eq 3 ]; then
    if [ $SECOND_DIGIT -lt 7 ]; then
      echo "`uname -r` kernel detected."
      cp -f dvbloopback/module/config_dvb_old.pl dvbloopback/module/config_dvb.pl
    else
      echo "`uname -r` kernel detected."
      cp -f dvbloopback/module/config_dvb_new.pl dvbloopback/module/config_dvb.pl
    fi
  fi
fi

rm -rf "${TMPDIR}"
echo "CXX=$CXX" >> config.mak
date >> config.log
echo "	$0 $*" >> config.log

